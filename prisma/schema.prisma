// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  login       String
  password    String
  version     Int           @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  FavsArtists FavsArtists[]
  FavsAlbums  FavsAlbums[]
  FavsTracks  FavsTracks[]
}

model Artist {
  id          String        @id @default(uuid())
  name        String
  grammy      Boolean       @default(false)
  Album       Album[]
  Track       Track[]
  FavsArtists FavsArtists[]
}

model Album {
  id         String       @id @default(uuid())
  name       String
  year       Int
  artist     Artist?      @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId   String?
  Track      Track[]
  FavsAlbums FavsAlbums[]
}

model Track {
  id         String       @id @default(uuid())
  name       String
  duration   Int
  artist     Artist?      @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId   String?
  album      Album?       @relation(fields: [albumId], references: [id], onDelete: SetNull)
  albumId    String?
  FavsTracks FavsTracks[]
}

model FavsArtists {
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@id([userId, artistId])
}

model FavsAlbums {
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([userId, albumId])
}

model FavsTracks {
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([userId, trackId])
}